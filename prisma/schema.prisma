generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Test {
  name              String @id
  testTotalDuration Int

  filters   Filters? @relation(fields: [filtersId], references: [id], onDelete: Cascade)
  filtersId String?  @unique

  sectionWiseStats SectionWiseStat[]
  sections         Section[]
  createdAt        DateTime          @default(now())
}

model Filters {
  id          String @id @default(cuid())
  incorrect   Int
  correct     Int
  unattempted Int

  test Test? @relation
}

model SectionWiseStat {
  id     String @id @default(cuid())
  test   Test   @relation(fields: [testId], references: [name], onDelete: Cascade)
  testId String

  marksScored      Float
  sectionMarks     Float
  accuracy         Float
  totalQuestions   Int
  attemptDuration  Float
  correctAnswers   Int
  inCorrectAnswers Int
  unAttempted      Int
  name             String
  order            Int
  sectionDuration  Float
}

model Section {
  id     String @id @default(cuid())
  test   Test   @relation(fields: [testId], references: [name], onDelete: Cascade)
  testId String

  sectionDuration Float
  sectionMarks    Float
  name            String
  order           Int

  questions       Question[]
}

model Question {
  id        String  @id @default(cuid())
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId String

  order       Int
  isAttempted Boolean
  isCorrect   Boolean
  timeTaken   Float

  marks           Marks?           @relation(fields: [marksId], references: [id])
  marksId         String?          @unique
  questionReasons QuestionReason[]
}

model Marks {
  id       String @id @default(cuid())
  positive Float
  negative Float

  question Question?
}

model Reason {
  id          String           @id @default(cuid())
  description String           @unique
  questions   QuestionReason[]
}

model QuestionReason {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  reason     Reason   @relation(fields: [reasonId], references: [id], onDelete: Cascade)
  reasonId   String

  @@unique([questionId, reasonId])
}
